{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "API Reference",
    "version" : "1.0.0",
    "description" : "# Overview\n\n<mark>This API in under construction and should not be used in a production environment</mark>\n\nThe Bizyness API allows customers to create and search for accounting objects such as invoices, clients, payments and to generate various reports.\n\nThis documentation provides information about each endpoint in the API. The right-hand pane of this page shows example requests and responses for each endpoint in cURL and many other languages.\n\n## Getting started\nFollow these steps to start licensing media:\n\n1. Create a Bizyness account\n\n2. Go in your Settings and create an API Key, you can also use the JWT method to authenticate your requests\n\n## Request/Response Format\nThe default response format is JSON. Requests with a message-body use plain JSON to set or update resource attributes. Successful requests will return a 200 OK HTTP status.\n\nSome general information about responses:\n\n- Dates are returned in Unix timestamp, see [Unix time](https://en.wikipedia.org/wiki/Unix_time).\n- Resource IDs are returned as strings.\n- Any decimal monetary amount, such as prices or totals, will be returned as numbers with two decimal places.\n- Other amounts, such as item counts, are returned as integers.\n- Blank fields are generally included as null or emtpy string instead of being omitted.\n\n## Errors\nThe API returns error codes such as 400, 403, 404, and 500 along with information about the error. Here are some common error responses:\n\nA 400 Bad Request response often means that the request body is improperly formatted or missing required fields. In the case of missing fields, the response includes the name of the field that is missing, as in the example in the right-hand column.\n\nA 401 Unauthorized response often means that the request did not include a valid authentication.\n\nA 404 Not Found response can mean that the object you are trying to access does not exist.\n\nA 500 Internal Server Error response means that an error happened on the server. This can mean that the request is not valid, such as if you try to delete or edit a collection that does not exist, or if the API otherwise can't do what you requested. It can also mean a temporary problem with the API. Check your request and try again or contact us.\n\n## Pagination\nRequests that return multiple items will be paginated to 100 items by default. Alternatively the items per page can be specified with the `?limit` parameter:\n\n`GET /invoices?limit=200`\n\nYou can specify further pages with the `?page` parameter:\n\n`GET /invoices?page=2`\n\nPage number is 1-based and omitting the `?page` parameter will return the first page.\n\n## Rate limits\nAll applications are limited to a certain number of API requests per minute. If your application exceeds its limit, the API returns an error response with a status code of 429.\n\nThe API supports a limit of 10 requests per second.\n"
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/lpb/bizyness-api/1.0.0"
  }, {
    "url" : "https://api.bizyness.fr"
  } ],
  "tags" : [ {
    "name" : "Invoice",
    "description" : "Managing your invoices"
  }, {
    "name" : "Quote",
    "description" : "Managing your quotes"
  }, {
    "name" : "Activity",
    "description" : "Managing your activities"
  }, {
    "name" : "Client",
    "description" : "Managing your clients"
  }, {
    "name" : "Supplier",
    "description" : "Managing your suppliers"
  }, {
    "name" : "Article",
    "description" : "Managing your articles"
  }, {
    "name" : "Miscellaneous",
    "description" : "Transverval ressources"
  } ],
  "paths" : {
    "/invoices" : {
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "List all invoices",
        "parameters" : [ {
          "$ref" : "#/components/parameters/PageParam"
        }, {
          "$ref" : "#/components/parameters/LimitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the list of invoices",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvoiceList"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Invoice" ],
        "summary" : "Create an invoice",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InvoiceBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            },
            "description" : "Created invoice"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/payments" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Invoice ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "636945e14ce97a4c1c561885"
        }
      } ],
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "Retrieve payments",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentList"
                }
              }
            },
            "description" : "List of payments"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/download" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Invoice ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "636945e14ce97a4c1c561885"
        }
      } ],
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "Download PDF file",
        "responses" : {
          "200" : {
            "description" : "Return the PDF file",
            "content" : {
              "application/pdf" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                },
                "examples" : {
                  "sampleFile" : {
                    "summary" : "A sample file",
                    "externalValue" : "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
                  }
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Invoice ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "636945e14ce97a4c1c561885"
        }
      } ],
      "get" : {
        "tags" : [ "Invoice" ],
        "summary" : "Retrieve an invoice",
        "responses" : {
          "200" : {
            "description" : "Return a single invoice",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "delete" : {
        "tags" : [ "Invoice" ],
        "summary" : "Delete an invoice",
        "responses" : {
          "204" : {
            "description" : "The invoice was deleted successfully"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Invoice" ],
        "summary" : "Update an invoice",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated invoice",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "patch" : {
        "tags" : [ "Invoice" ],
        "summary" : "Update an invoice",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/JSONPatchRequestAddReplaceTest"
                  }, {
                    "$ref" : "#/components/schemas/JSONPatchRequestRemove"
                  }, {
                    "$ref" : "#/components/schemas/JSONPatchRequestMoveCopy"
                  } ]
                }
              },
              "examples" : {
                "AddReplaceTest" : {
                  "value" : [ {
                    "op" : "replace",
                    "path" : "/lines/0/type",
                    "value" : 1
                  } ]
                },
                "Remove" : {
                  "value" : [ {
                    "op" : "remove",
                    "path" : "/subject"
                  } ]
                },
                "MoveCopy" : {
                  "value" : [ {
                    "op" : "copy",
                    "from" : "/lines/0/sku",
                    "path" : "/lines/1/sku"
                  } ]
                }
              }
            },
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Invoice"
              },
              "example" : {
                "payment_term" : 3,
                "template" : "london"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated invoice",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/countries" : {
      "get" : {
        "tags" : [ "Miscellaneous" ],
        "summary" : "List all countries",
        "responses" : {
          "200" : {
            "description" : "Return the list of countries",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountryList"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/articles" : {
      "get" : {
        "tags" : [ "Article" ],
        "summary" : "List all invoices",
        "parameters" : [ {
          "$ref" : "#/components/parameters/KeywordParam"
        }, {
          "$ref" : "#/components/parameters/PageParam"
        }, {
          "$ref" : "#/components/parameters/LimitParam"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the list of articles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArticleList"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Article" ],
        "summary" : "Create an article",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArticleBody"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            },
            "description" : "Created invoice"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    },
    "/articles/{id}" : {
      "parameters" : [ {
        "name" : "id",
        "in" : "path",
        "description" : "Article ID",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "636945f14ce97a4c1c561885"
        }
      } ],
      "get" : {
        "tags" : [ "Article" ],
        "summary" : "Retrieve an article",
        "responses" : {
          "200" : {
            "description" : "Return a single article",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Article"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "delete" : {
        "tags" : [ "Article" ],
        "summary" : "Delete an article",
        "responses" : {
          "204" : {
            "description" : "The article was deleted successfully"
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Article" ],
        "summary" : "Update an article",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Article"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated article",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Invoice"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      },
      "patch" : {
        "tags" : [ "Article" ],
        "summary" : "Update an article",
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/JSONPatchRequestAddReplaceTest"
                  }, {
                    "$ref" : "#/components/schemas/JSONPatchRequestRemove"
                  }, {
                    "$ref" : "#/components/schemas/JSONPatchRequestMoveCopy"
                  } ]
                }
              },
              "examples" : {
                "AddReplaceTest" : {
                  "value" : [ {
                    "op" : "replace",
                    "path" : "/lines/0/type",
                    "value" : 1
                  } ]
                },
                "Remove" : {
                  "value" : [ {
                    "op" : "remove",
                    "path" : "/subject"
                  } ]
                },
                "MoveCopy" : {
                  "value" : [ {
                    "op" : "copy",
                    "from" : "/lines/0/sku",
                    "path" : "/lines/1/sku"
                  } ]
                }
              }
            },
            "application/merge-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Article"
              },
              "example" : {
                "payment_term" : 3,
                "template" : "london"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated article",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Article"
                }
              }
            }
          },
          "500" : {
            "$ref" : "#/components/responses/InternalServerError"
          },
          "401" : {
            "$ref" : "#/components/responses/Unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "PageParam" : {
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "minimum" : 1
        },
        "description" : "The page of results to return"
      },
      "LimitParam" : {
        "in" : "query",
        "name" : "limit",
        "required" : false,
        "schema" : {
          "type" : "integer",
          "minimum" : 1,
          "maximum" : 250,
          "default" : 100
        },
        "description" : "The number of records to return in one request"
      },
      "KeywordParam" : {
        "in" : "query",
        "name" : "keyword",
        "required" : false,
        "schema" : {
          "type" : "string"
        },
        "description" : "The keyword to search for"
      }
    },
    "responses" : {
      "NotFound" : {
        "description" : "The specified resource was not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 404,
              "message" : "Resource not found"
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 401,
              "message" : "Unauthorized"
            }
          }
        }
      },
      "InternalServerError" : {
        "description" : "Internal Server Error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            },
            "example" : {
              "code" : 500,
              "message" : "Internal server error"
            }
          }
        }
      }
    },
    "schemas" : {
      "Error" : {
        "type" : "object",
        "required" : [ "message", "code" ],
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The error message indicating what the issue is"
          },
          "code" : {
            "type" : "integer",
            "description" : "The http status code"
          }
        }
      },
      "JSONPatchRequestAddReplaceTest" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "value", "op", "path" ],
        "properties" : {
          "path" : {
            "description" : "A JSON Pointer path.",
            "type" : "string"
          },
          "value" : {
            "description" : "The value to add, replace or test."
          }
        }
      },
      "JSONPatchRequestRemove" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "op", "path" ],
        "properties" : {
          "path" : {
            "description" : "A JSON Pointer path.",
            "type" : "string"
          },
          "op" : {
            "description" : "The operation to perform.",
            "type" : "string",
            "enum" : [ "remove" ]
          }
        }
      },
      "JSONPatchRequestMoveCopy" : {
        "type" : "object",
        "additionalProperties" : false,
        "required" : [ "from", "op", "path" ],
        "properties" : {
          "path" : {
            "description" : "A JSON Pointer path.",
            "type" : "string"
          },
          "op" : {
            "description" : "The operation to perform.",
            "type" : "string",
            "enum" : [ "move", "copy" ]
          }
        }
      },
      "ArticleBody" : {
        "type" : "object",
        "properties" : {
          "manufacturer" : {
            "type" : "string",
            "example" : "Apple"
          },
          "origin_country" : {
            "type" : "string",
            "example" : "FR"
          },
          "price" : {
            "type" : "number",
            "example" : 10.32
          },
          "purchase_price" : {
            "type" : "number",
            "example" : 10.32
          },
          "sku" : {
            "type" : "string",
            "example" : "AZ123"
          },
          "title" : {
            "type" : "string",
            "example" : "Shirt"
          },
          "description" : {
            "type" : "string",
            "example" : "Size M"
          },
          "vat" : {
            "type" : "number",
            "example" : 20
          },
          "type" : {
            "type" : "number",
            "example" : 0
          },
          "vat_included" : {
            "type" : "boolean"
          },
          "second_hand_good" : {
            "type" : "boolean"
          }
        }
      },
      "Article" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CollectionId"
        }, {
          "$ref" : "#/components/schemas/ArticleBody"
        } ]
      },
      "Country" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "example" : "FR"
          },
          "eu_member" : {
            "type" : "boolean"
          },
          "label" : {
            "type" : "object",
            "properties" : {
              "fr" : {
                "type" : "string",
                "example" : "France"
              },
              "en" : {
                "type" : "string",
                "example" : "France"
              }
            }
          }
        }
      },
      "Payment" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CollectionId"
        }, {
          "$ref" : "#/components/schemas/PaymentBody"
        } ]
      },
      "PaymentBody" : {
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "example" : 123.21
          },
          "currency" : {
            "type" : "string",
            "example" : "EUR"
          },
          "label" : {
            "type" : "string",
            "example" : "Subscription"
          },
          "date" : {
            "type" : "integer",
            "example" : 1566493220992
          },
          "notes" : {
            "type" : "string",
            "example" : "Client will provide the next payment tomorrow"
          },
          "method" : {
            "$ref" : "#/components/schemas/PaymentMethod"
          }
        }
      },
      "PaymentMethod" : {
        "enum" : [ "bank_transfer", "cash", "check", "cesu", "direct_debit", "credit_card", "paypal", "other" ],
        "type" : "string"
      },
      "ListSummaryItem" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer"
          },
          "amount" : {
            "type" : "number"
          }
        }
      },
      "InvoiceListSummary" : {
        "type" : "object",
        "properties" : {
          "total" : {
            "$ref" : "#/components/schemas/ListSummaryItem"
          },
          "paid" : {
            "$ref" : "#/components/schemas/ListSummaryItem"
          },
          "unpaid" : {
            "$ref" : "#/components/schemas/ListSummaryItem"
          },
          "overdue" : {
            "$ref" : "#/components/schemas/ListSummaryItem"
          },
          "draft" : {
            "$ref" : "#/components/schemas/ListSummaryItem"
          }
        },
        "example" : {
          "total" : {
            "size" : 123,
            "amount" : 1203.54
          },
          "paid" : {
            "size" : 110,
            "amount" : 1052.23
          },
          "unpaid" : {
            "size" : 2,
            "amount" : 100
          },
          "overdue" : {
            "size" : 6,
            "amount" : 32.3
          },
          "draft" : {
            "size" : 5,
            "amount" : 19.01
          }
        }
      },
      "InvoiceList" : {
        "type" : "object",
        "properties" : {
          "summary" : {
            "$ref" : "#/components/schemas/InvoiceListSummary"
          },
          "invoices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Invoice"
            }
          }
        }
      },
      "PaymentList" : {
        "type" : "object",
        "properties" : {
          "payments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Payment"
            }
          }
        }
      },
      "ArticleList" : {
        "type" : "object",
        "properties" : {
          "articles" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Article"
            }
          }
        }
      },
      "CountryList" : {
        "type" : "object",
        "properties" : {
          "countries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Country"
            }
          }
        }
      },
      "CollectionId" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "5d5eca258126ab647499f9bf"
          }
        }
      },
      "BillOfSaleEvents" : {
        "type" : "object",
        "properties" : {
          "events" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "date" : {
                  "type" : "integer"
                },
                "key" : {
                  "type" : "string"
                },
                "values" : {
                  "type" : "array",
                  "items" : {
                    "oneOf" : [ {
                      "type" : "string"
                    }, {
                      "type" : "integer"
                    } ]
                  }
                }
              }
            },
            "example" : [ {
              "date" : 1566493220992,
              "key" : "invoice.history.paymentAdded",
              "values" : [ "€", 23 ]
            }, {
              "date" : 1566423220992,
              "key" : "invoice.history.issued",
              "values" : [ ]
            } ]
          }
        }
      },
      "BillOfSaleAmounts" : {
        "type" : "object",
        "properties" : {
          "total_including_taxes" : {
            "type" : "number",
            "example" : 123.54
          },
          "total_excluding_taxes" : {
            "type" : "number",
            "example" : 98.12
          }
        }
      },
      "ExternalReference" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "example" : "5d5eca258126ab647499f9bf"
          },
          "identifier" : {
            "type" : "string",
            "example" : "John Doe"
          }
        }
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "last_name" : {
            "type" : "string",
            "example" : "Doe"
          },
          "first_name" : {
            "type" : "string",
            "example" : "John"
          },
          "company_name" : {
            "type" : "string",
            "example" : "John's company"
          },
          "address" : {
            "type" : "string",
            "example" : "123 rue des archives"
          },
          "address_supplement" : {
            "type" : "string",
            "example" : "Porte gauche"
          },
          "zip" : {
            "type" : "string",
            "example" : "A1234"
          },
          "city" : {
            "type" : "string",
            "example" : "Paris"
          },
          "country_code" : {
            "type" : "string",
            "example" : "FR"
          },
          "vat_number" : {
            "type" : "string",
            "example" : "FR123456789"
          }
        }
      },
      "BillOfSaleBody" : {
        "type" : "object",
        "properties" : {
          "currency" : {
            "type" : "string",
            "example" : "EUR"
          },
          "status" : {
            "enum" : [ "draft", "not_paid", "paid", "cancelled" ],
            "type" : "string"
          },
          "payment_term" : {
            "type" : "integer",
            "example" : 1
          },
          "discount_amount" : {
            "type" : "number",
            "example" : 12.2
          },
          "discount_type" : {
            "enum" : [ "percentage", "fixed" ],
            "type" : "string"
          },
          "rebate" : {
            "type" : "number",
            "example" : 10
          },
          "activity" : {
            "type" : "string",
            "example" : "5d5efds258126ab647499f9bf"
          },
          "template" : {
            "enum" : [ "basic", "london", "paris", "berlin" ],
            "type" : "string"
          },
          "shipping_amount" : {
            "type" : "number",
            "example" : 4.5
          },
          "shipping_vat" : {
            "type" : "number",
            "example" : 20
          },
          "vat_liable" : {
            "type" : "boolean"
          },
          "vat_included" : {
            "type" : "boolean"
          },
          "client" : {
            "$ref" : "#/components/schemas/ExternalReference"
          },
          "billing_address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "subject" : {
            "type" : "string",
            "example" : "Design of the homepage"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "sku" : {
                  "type" : "string"
                },
                "description" : {
                  "type" : "string"
                },
                "title" : {
                  "type" : "string"
                },
                "type" : {
                  "type" : "integer"
                },
                "price" : {
                  "type" : "number"
                },
                "quantity" : {
                  "type" : "number"
                },
                "unit" : {
                  "enum" : [ "piece", "hour", "day", "meter", "kilometer", "kilogram", "square_meter" ],
                  "type" : "string"
                },
                "discount_amount" : {
                  "type" : "number"
                },
                "discount_type" : {
                  "enum" : [ "percentage", "fixed" ],
                  "type" : "string"
                },
                "vat" : {
                  "type" : "number"
                },
                "origin_country" : {
                  "type" : "string"
                },
                "second_hand_good" : {
                  "type" : "boolean"
                }
              }
            },
            "example" : [ {
              "sku" : "AX123",
              "description" : "Mockup and copywriting",
              "title" : "Homepage design",
              "type" : 0,
              "price" : 120.32,
              "quantity" : 1,
              "unit" : "piece",
              "discount_amount" : 10,
              "discount_type" : "percentage",
              "vat" : 20,
              "origin_country" : "FR",
              "second_hand_good" : false
            }, {
              "sku" : "AX456",
              "description" : "Logo with 3 colors",
              "title" : "Logo design",
              "type" : 0,
              "price" : 59,
              "quantity" : 1,
              "unit" : "piece",
              "discount_amount" : 0,
              "discount_type" : "percentage",
              "vat" : 20,
              "origin_country" : "FR",
              "second_hand_good" : false
            } ]
          },
          "lines_groups" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string"
                },
                "articles" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer"
                  }
                }
              }
            },
            "example" : [ {
              "name" : "Design and mockup",
              "articles" : [ 0, 1 ]
            } ]
          },
          "comments" : {
            "type" : "string",
            "example" : "Payment to be done within 3 days"
          },
          "payment_instructions_included" : {
            "type" : "boolean"
          },
          "payment_conditions_included" : {
            "type" : "boolean"
          },
          "language" : {
            "enum" : [ "fr", "en", "de", "es", "it" ],
            "type" : "string"
          },
          "vat_exemption_text" : {
            "type" : "string",
            "example" : "Article 138 CE/2008"
          }
        }
      },
      "InvoiceBody" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BillOfSaleBody"
        }, {
          "type" : "object",
          "properties" : {
            "execution_date" : {
              "type" : "integer",
              "example" : 1566493220992
            },
            "paid_date" : {
              "type" : "integer",
              "example" : 1566493220992
            },
            "payment_method" : {
              "type" : "integer",
              "example" : 1
            }
          }
        } ]
      },
      "Invoice" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CollectionId"
        }, {
          "$ref" : "#/components/schemas/InvoiceBody"
        }, {
          "$ref" : "#/components/schemas/BillOfSaleEvents"
        }, {
          "$ref" : "#/components/schemas/BillOfSaleAmounts"
        } ]
      }
    },
    "securitySchemes" : {
      "ApiKey" : {
        "type" : "apiKey",
        "name" : "X-Api-Key",
        "in" : "header"
      },
      "JWTAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  },
  "security" : [ {
    "ApiKey" : [ ]
  }, {
    "JWTAuth" : [ ]
  } ]
}